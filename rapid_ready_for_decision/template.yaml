AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Hypertension Fast-Tracker

Parameters:
  # Layer ARNs
  PythonDependenciesLayerArn:
    Type: String
  PdfGeneratorLayerArn:
    Type: String

  # Lighthouse Authentication
  LighthouseTokenUrl:
    Type: String
  LighthouseJwtAudUrl:
    Type: String
  LighthouseJwtScope:
    Type: String
  LighthouseOAuthClientId:
    Type: String
    NoEcho: true
  LighthouseOAuthGrantType:
    Type: String
  LighthouseOAuthAssertionType:
    Type: String
  KmsCmkId:
    Type: String

  # Lighthouse Veterans Health API, FHIR Obervation Endpoint
  LighthouseObservationUrl:
    Type: String
  LighthouseObservationCategory:
    Type: String
  LighthouseObservationLoincCode:
    Type: String

Resources:
  VroMainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Main Lambda function of the VBA Virtual Regional Office'
      CodeUri: py-root/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          FONTCONFIG_PATH: /opt/fonts
          WKHTMLTOPDF_PATH: /opt/bin/wkhtmltopdf
          LighthouseTokenUrl: !Ref LighthouseTokenUrl
          LighthouseJwtAudUrl: !Ref LighthouseJwtAudUrl
          LighthouseJwtScope: !Ref LighthouseJwtScope
          LighthouseOAuthGrantType: !Ref LighthouseOAuthGrantType
          LighthouseOAuthAssertionType: !Ref LighthouseOAuthAssertionType
          # TODO: Cleanup this comment: For some reason !GetAtt VroLhPrivateRsaKey.Arn doesnt work. I would think this should work.
          LighthousePrivateRsaKeySecretArn: !Ref VroLhPrivateRsaKey
          VroLighthouseOAuthClientIdArn: !Ref VroLighthouseOAuthClientId
          KmsCmkId: !Ref KmsCmkId
          LighthouseObservationUrl: !Ref LighthouseObservationUrl
          LighthouseObservationCategory: !Ref LighthouseObservationCategory
          LighthouseObservationLoincCode: !Ref LighthouseObservationLoincCode
      Timeout: 15
      Role: !GetAtt VroLambdaExecutionRole.Arn

      Layers:
      - !Ref PdfGeneratorLayerArn
      - !Ref PythonDependenciesLayerArn
  VroLhPrivateRsaKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'VBA Virtual Regional Office: Your RSA private key to access Lighthouse
        APIs via the Client Credentials OAuth grant type'
      SecretString: Dummy RSA key. Upload your real key.
      KmsKeyId: !Ref KmsCmkId
  VroLighthouseOAuthClientId:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'VBA Virtual Regional Office: Your private client ID to access
      Lighthouse APIs'
      SecretString: !Ref LighthouseOAuthClientId
      KmsKeyId: !Ref KmsCmkId

  VroLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: vro-lambda-execution-role
      # "Allows Lambda to assume this role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
            # TODO: Limit this down. Allowing all lambda to assume this role is too much. Limit it
            # to just the ARN of your lambda function.
          Principal:
            Service: lambda.amazonaws.com
        # TODO: Cleanup this comment: It's unfortunate that they use the word "Role" in the name, because it's actually a policy.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: VroLambdaSecretsManagerPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
            - !Ref VroLhPrivateRsaKey
            - !Ref VroLighthouseOAuthClientId
          - Effect: Allow
            Action: kms:Decrypt
            Resource: '*'
